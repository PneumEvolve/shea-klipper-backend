"""Fix categories

Revision ID: 5d5f03092a58
Revises: 7b0d157cfa62
Create Date: 2025-03-16 11:03:07.546148

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = '5d5f03092a58'
down_revision: Union[str, None] = '7b0d157cfa62'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ✅ 1. Add the new columns but allow NULL temporarily to avoid constraint issues
    op.add_column('food_inventory', sa.Column('name', sa.String(), nullable=True))
    op.add_column('food_inventory', sa.Column('quantity', sa.Integer(), nullable=False, server_default="0"))
    op.add_column('food_inventory', sa.Column('desired_quantity', sa.Integer(), nullable=False, server_default="0"))
    op.add_column('food_inventory', sa.Column('categories', sa.Text(), nullable=True))

    # ✅ 2. Set a default name for existing records (avoids the NOT NULL error)
    op.execute("UPDATE food_inventory SET name = 'Unnamed Item' WHERE name IS NULL")

    # ✅ 3. Now enforce the NOT NULL constraint
    op.alter_column('food_inventory', 'name', nullable=False)

    # ✅ 4. Drop the old 'items' column
    op.drop_column('food_inventory', 'items')


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('food_inventory', sa.Column('items', sa.TEXT(), autoincrement=False, nullable=True))
    op.drop_column('food_inventory', 'categories')
    op.drop_column('food_inventory', 'desired_quantity')
    op.drop_column('food_inventory', 'quantity')
    op.drop_column('food_inventory', 'name')
    # ### end Alembic commands ###