"""add problems Models

Revision ID: 45a7ab9742d2
Revises: 9d4ad1a50d35
Create Date: 2025-08-10 20:33:15.567532

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '45a7ab9742d2'
down_revision: Union[str, None] = '9d4ad1a50d35'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema (safe for existing data)."""
    from alembic import op
    import sqlalchemy as sa
    from sqlalchemy.dialects import postgresql

    # --- problems: add/adjust columns ---
    # (leave as nullable; you can enforce later once data is stable)
    op.add_column('problems', sa.Column('domain', sa.String(), nullable=True))
    op.add_column('problems', sa.Column('tags', postgresql.ARRAY(sa.String()), nullable=True))
    op.add_column('problems', sa.Column('scope', sa.String(), nullable=True))
    op.add_column('problems', sa.Column('severity', sa.Integer(), nullable=True))
    op.add_column('problems', sa.Column('anonymous', sa.Boolean(), nullable=True))
    op.add_column('problems', sa.Column('created_by_email', sa.String(), nullable=True))
    op.add_column('problems', sa.Column('duplicate_of_id', sa.Integer(), nullable=True))
    op.add_column('problems', sa.Column('conversation_id', sa.Integer(), nullable=True))
    op.add_column('problems', sa.Column('votes_count', sa.Integer(), server_default="0", nullable=True))
    op.add_column('problems', sa.Column('followers_count', sa.Integer(), server_default="0", nullable=True))

    # make description required
    op.alter_column('problems', 'description', existing_type=sa.TEXT(), nullable=False)

    # indexes / FKs (skip dropping old ones; just add we need)
    op.create_index(op.f('ix_problems_domain'), 'problems', ['domain'], unique=False)
    op.create_index(op.f('ix_problems_title'), 'problems', ['title'], unique=False)
    op.create_foreign_key('fk_problems_duplicate_of', 'problems', 'problems', ['duplicate_of_id'], ['id'])
    op.create_foreign_key('fk_problems_conversation', 'problems', 'conversations', ['conversation_id'], ['id'])

    # --- problem_votes: add voter_identity safely ---
    # 1) add as NULLable
    op.add_column('problem_votes', sa.Column('voter_identity', sa.String(), nullable=True))
    op.add_column('problem_votes', sa.Column('created_at', sa.DateTime(), nullable=True))

    # 2) backfill from previous user_id (or synthesize a unique value to avoid NULLs)
    op.execute("""
        UPDATE problem_votes
        SET voter_identity = CASE
            WHEN user_id IS NOT NULL AND user_id <> '' THEN user_id
            ELSE 'migrated:' || id::text
        END
        WHERE voter_identity IS NULL
    """)

    # 3) now enforce NOT NULL + indexes + unique constraint
    op.alter_column('problem_votes', 'voter_identity', existing_type=sa.String(), nullable=False)
    op.create_index(op.f('ix_problem_votes_problem_id'), 'problem_votes', ['problem_id'], unique=False)
    op.create_index(op.f('ix_problem_votes_voter_identity'), 'problem_votes', ['voter_identity'], unique=False)
    op.create_unique_constraint('uq_problem_vote_one', 'problem_votes', ['problem_id', 'voter_identity'])

    # 4) drop legacy columns (use IF EXISTS to be robust)
    op.execute('ALTER TABLE problem_votes DROP COLUMN IF EXISTS vote_type')
    op.execute('ALTER TABLE problem_votes DROP COLUMN IF EXISTS "timestamp"')
    op.execute('ALTER TABLE problem_votes DROP COLUMN IF EXISTS user_id')

    # --- problem_follows: new table ---
    op.create_table(
        'problem_follows',
        sa.Column('id', sa.Integer(), primary_key=True, nullable=False),
        sa.Column('problem_id', sa.Integer(), sa.ForeignKey('problems.id', ondelete='CASCADE'), nullable=False),
        sa.Column('identity', sa.String(), nullable=False),
        sa.Column('created_at', sa.DateTime(), nullable=True),
        sa.UniqueConstraint('problem_id', 'identity', name='uq_problem_follow_one')
    )
    op.create_index(op.f('ix_problem_follows_problem_id'), 'problem_follows', ['problem_id'], unique=False)
    op.create_index(op.f('ix_problem_follows_identity'), 'problem_follows', ['identity'], unique=False)

def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(None, 'problems', type_='foreignkey')
    op.drop_constraint(None, 'problems', type_='foreignkey')
    op.drop_index(op.f('ix_problems_title'), table_name='problems')
    op.drop_index(op.f('ix_problems_domain'), table_name='problems')
    op.create_index('ix_problems_id', 'problems', ['id'], unique=False)
    op.alter_column('problems', 'description',
               existing_type=sa.TEXT(),
               nullable=True)
    op.drop_column('problems', 'followers_count')
    op.drop_column('problems', 'votes_count')
    op.drop_column('problems', 'conversation_id')
    op.drop_column('problems', 'duplicate_of_id')
    op.drop_column('problems', 'created_by_email')
    op.drop_column('problems', 'anonymous')
    op.drop_column('problems', 'severity')
    op.drop_column('problems', 'scope')
    op.drop_column('problems', 'tags')
    op.drop_column('problems', 'domain')
    op.add_column('problem_votes', sa.Column('vote_type', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.add_column('problem_votes', sa.Column('user_id', sa.VARCHAR(), autoincrement=False, nullable=False))
    op.add_column('problem_votes', sa.Column('timestamp', postgresql.TIMESTAMP(), autoincrement=False, nullable=True))
    op.drop_constraint(None, 'problem_votes', type_='foreignkey')
    op.create_foreign_key('problem_votes_problem_id_fkey', 'problem_votes', 'problems', ['problem_id'], ['id'])
    op.drop_constraint('uq_problem_vote_one', 'problem_votes', type_='unique')
    op.drop_index(op.f('ix_problem_votes_voter_identity'), table_name='problem_votes')
    op.drop_index(op.f('ix_problem_votes_problem_id'), table_name='problem_votes')
    op.create_index('ix_problem_votes_id', 'problem_votes', ['id'], unique=False)
    op.alter_column('problem_votes', 'problem_id',
               existing_type=sa.INTEGER(),
               nullable=True)
    op.drop_column('problem_votes', 'created_at')
    op.drop_column('problem_votes', 'voter_identity')
    op.create_index('ix_forge_votes_id', 'forge_votes', ['id'], unique=False)
    op.drop_index(op.f('ix_problem_follows_problem_id'), table_name='problem_follows')
    op.drop_index(op.f('ix_problem_follows_identity'), table_name='problem_follows')
    op.drop_table('problem_follows')
    # ### end Alembic commands ###
